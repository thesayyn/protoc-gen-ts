/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: test/_/oneof.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class OneOfWithoutAnyOtherFields extends pb_1.Message {
    #one_of_decls = [[1, 2], [4, 3]];
    constructor(data?: any[] | ({} & (({
        nickname?: string;
        realname?: never;
    } | {
        nickname?: never;
        realname?: string;
    }) | ({
        age?: string;
        date_of_birth?: never;
    } | {
        age?: never;
        date_of_birth?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("realname" in data && data.realname != undefined) {
                this.realname = data.realname;
            }
            if ("age" in data && data.age != undefined) {
                this.age = data.age;
            }
            if ("date_of_birth" in data && data.date_of_birth != undefined) {
                this.date_of_birth = data.date_of_birth;
            }
        }
    }
    get nickname() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set nickname(value: string) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get realname() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set realname(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get age() {
        return pb_1.Message.getField(this, 4) as string;
    }
    set age(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
    }
    get date_of_birth() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set date_of_birth(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
    }
    get nickname_or_realname() {
        const cases: {
            [index: number]: "none" | "nickname" | "realname";
        } = {
            0: "none",
            1: "nickname",
            2: "realname"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    get age_or_dateofbirth() {
        const cases: {
            [index: number]: "none" | "age" | "date_of_birth";
        } = {
            0: "none",
            4: "age",
            3: "date_of_birth"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4, 3])];
    }
    static fromObject(data: {
        nickname?: string;
        realname?: string;
        age?: string;
        date_of_birth?: string;
    }) {
        const message = new OneOfWithoutAnyOtherFields({});
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.realname != null) {
            message.realname = data.realname;
        }
        if (data.age != null) {
            message.age = data.age;
        }
        if (data.date_of_birth != null) {
            message.date_of_birth = data.date_of_birth;
        }
        return message;
    }
    toObject() {
        const data: {
            nickname?: string;
            realname?: string;
            age?: string;
            date_of_birth?: string;
        } = {};
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.realname != null) {
            data.realname = this.realname;
        }
        if (this.age != null) {
            data.age = this.age;
        }
        if (this.date_of_birth != null) {
            data.date_of_birth = this.date_of_birth;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.nickname === "string" && this.nickname.length)
            writer.writeString(1, this.nickname);
        if (typeof this.realname === "string" && this.realname.length)
            writer.writeString(2, this.realname);
        if (typeof this.age === "string" && this.age.length)
            writer.writeString(4, this.age);
        if (typeof this.date_of_birth === "string" && this.date_of_birth.length)
            writer.writeString(3, this.date_of_birth);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OneOfWithoutAnyOtherFields {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OneOfWithoutAnyOtherFields();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.nickname = reader.readString();
                    break;
                case 2:
                    message.realname = reader.readString();
                    break;
                case 4:
                    message.age = reader.readString();
                    break;
                case 3:
                    message.date_of_birth = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OneOfWithoutAnyOtherFields {
        return OneOfWithoutAnyOtherFields.deserialize(bytes);
    }
}
export class OneOf extends pb_1.Message {
    #one_of_decls = [[3, 4]];
    constructor(data?: any[] | ({
        nickname?: string;
    } & (({
        date_of_birth?: string;
        age?: never;
    } | {
        date_of_birth?: never;
        age?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("date_of_birth" in data && data.date_of_birth != undefined) {
                this.date_of_birth = data.date_of_birth;
            }
            if ("age" in data && data.age != undefined) {
                this.age = data.age;
            }
        }
    }
    get nickname() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get date_of_birth() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set date_of_birth(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get age() {
        return pb_1.Message.getField(this, 4) as string;
    }
    set age(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get age_or_dateofbirth() {
        const cases: {
            [index: number]: "none" | "date_of_birth" | "age";
        } = {
            0: "none",
            3: "date_of_birth",
            4: "age"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
    }
    static fromObject(data: {
        nickname?: string;
        date_of_birth?: string;
        age?: string;
    }) {
        const message = new OneOf({});
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.date_of_birth != null) {
            message.date_of_birth = data.date_of_birth;
        }
        if (data.age != null) {
            message.age = data.age;
        }
        return message;
    }
    toObject() {
        const data: {
            nickname?: string;
            date_of_birth?: string;
            age?: string;
        } = {};
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.date_of_birth != null) {
            data.date_of_birth = this.date_of_birth;
        }
        if (this.age != null) {
            data.age = this.age;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.nickname === "string" && this.nickname.length)
            writer.writeString(1, this.nickname);
        if (typeof this.date_of_birth === "string" && this.date_of_birth.length)
            writer.writeString(3, this.date_of_birth);
        if (typeof this.age === "string" && this.age.length)
            writer.writeString(4, this.age);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OneOf {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OneOf();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.date_of_birth = reader.readString();
                    break;
                case 4:
                    message.age = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OneOf {
        return OneOf.deserialize(bytes);
    }
}
