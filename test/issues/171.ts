/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: test/_/issues/171.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum E {
    One = 0,
    Two = 1
}
export class Test extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        Enums?: E[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("Enums" in data && data.Enums != undefined) {
                this.Enums = data.Enums;
            }
        }
    }
    get Enums() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as E[];
    }
    set Enums(value: E[]) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        Enums?: E[];
    }): Test {
        const message = new Test({});
        if (data.Enums != null) {
            message.Enums = data.Enums;
        }
        return message;
    }
    toObject() {
        const data: {
            Enums?: E[];
        } = {};
        if (this.Enums != null) {
            data.Enums = this.Enums;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.Enums.length)
            writer.writePackedEnum(1, this.Enums);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Test {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Test();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.Enums = reader.readPackedEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Test {
        return Test.deserialize(bytes);
    }
}
